#Dividimos el set en entrenamiento y testing
library(caTools)
setwd("E:/Archivos/Curso IA R/IA_dovo/2_Multiple linear regresion")
#Cargamos el dataset
dataset <- read.csv("50_Startups.csv")
View(dataset)
#Generamos la variable categíroca
dataset$State <- factor(dataset$State,
levels = c("California", "Florida", "New York"),
labels = c(1, 2, 3))
split = sample.split(dataset$Profit , SplitRatio = 0.8) #Divide la base de datos cn la variable y el porcentaje
training_set = subset(dataset, split == TRUE) #Toma los valores en los que "split" toma valor TRUE
testing_set = subset(dataset, split == FALSE) #Toma los valores en los que "split" toma valor FALSE
View(testing_set)
names(dataset)
training_set <- training_set[,c(4,1,2,3,5)]
View(testing_set)
names(training_set)
View(training_set)
testing_set <- testing_set[,c(4,1,2,3,5)]
training_set[,2:5] = scale(training_set[,2:5]) #No trabaja con factores por eso solo elegimos de la 2:3
testing_set[,2:5] = scale(testing_set[,2:5])
View(testing_set)
View(testing_set)
training_set[,2:5] = scale(training_set[,2:5]) #No trabaja con factores por eso solo elegimos de la 2:3
testing_set[,2:5] = scale(testing_set[,2:5])
#Cargamos el dataset
dataset <- read.csv("50_Startups.csv")
#Generamos la variable categíroca
dataset$State <- factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
View(dataset)
library(caTools)
set.seed(123) #Genera una secuencia de numeros aleatorios
split = sample.split(dataset$Profit , SplitRatio = 0.8) #Divide la base de datos cn la variable y el porcentaje
training_set = subset(dataset, split == TRUE) #Toma los valores en los que "split" toma valor TRUE
testing_set = subset(dataset, split == FALSE) #Toma los valores en los que "split" toma valor FALSE
View(training_set)
#Ajustar el modelo de regresion lineal multiple en el conjunto de entrenamiento
regression <- lm(formula = Profit ~ ., data = training_set) # formula= debemos asignar la variable a predecir vs todas
summary(regression
)
plot(regression)
par(mfrow=c(2,2))
plot(regression) #Utilizamos para saber si se cumplen los supuestos de la regresion
summary(regression)
View(dataset)
View(testing_set)
View(training_set)
# Predecir los resultados con el conjunto de testing
y_predict = predict(regression, testing_set)
y_predict
# Predecir los resultados con el conjunto de testing
y_predict = predict(regression, newdata = testing_set)
# Predecir los resultados con el conjunto de testing
y_predict = predict(regression, newdata = testing_set)
y_predict
View(testing_set)
names(dataset)
#Construir un modelo optimo con Eliminación hacia atrás. Lo hacemos iterando
regression <- lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State
, data = training_set)
summary(regression)
regression <- lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = training_set)
summary(regression)
, data = training_set
regression <- lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = training_set)
summary(regression)
regression <- lm(formula = Profit ~ Marketing.Spend,
data = training_set)
summary(regression)
regression <- lm(formula = Profit ~ R.D.Spend,
data = training_set)
summary(regression)
regression <- lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = training_set)
summary(regression)
regression <- lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State
, data = training_set)
summary(regression)
regression <- lm(formula = Profit ~ R.D.Spend,
data = training_set)
summary(regression)
regression <- lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = training_set)
summary(regression)
# Predecir los resultados con el conjunto de testing
y_predict = predict(regression, newdata = testing_set)
