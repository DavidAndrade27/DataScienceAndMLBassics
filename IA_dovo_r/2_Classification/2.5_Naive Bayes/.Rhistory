mean(mtcars$mpg)
data <- iris
View(data)
data$Species
aes()
check()
install_github()
session.info()
sessionInfo()
install.packages("KernSmooth")
library("KernSmooth")
# Ajustar el clasificador con el conjunto de entrenamiento.
library(e1071)
?naiveBayes
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificacion como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
setwd("E:/Archivos/Curso IA R/IA_dovo_r/2_Classification/2.5_Naive Bayes")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Codificar la variable de clasificacion como factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Dividir los datos en conjunto de entrenamiento y conjunto de test
# install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
testing_set = subset(dataset, split == FALSE)
# Escalado de valores
training_set[,1:2] = scale(training_set[,1:2])
testing_set[,1:2] = scale(testing_set[,1:2])
# Ajustar el clasificador con el conjunto de entrenamiento.
library(e1071)
classifier = naiveBayes( x = training_set[,-3], y = training_set$Purchased)
# Prediccion de los resultados con el conjunto de testing
y_pred = predict(classifier, newdata = testing_set[,-3])
# Crear la matriz de confusion
cm = table(testing_set[, 3], y_pred)
cm
y_pred
