if (x > 3){
y = 10
} else {
y = 0
}
# IF & ELSe#
x = rand()
# IF & ELSe#
x = randu()
# IF & ELSe#
x = randu(1)
# IF & ELSe#
x = runif(min = 0, max = 10)
# IF & ELSe#
x = runif(1, min = 0, max = 10)
if (x > 3){
y = 10
} else {
y = 0
}
# IF & ELSe#
x = runif(1, min = 0, max = 10)
if (x > 3){
y = 10
} else {
y = 0
}
# IF & ELSe#
x = runif(1, min = -5, max = 5)
if (x > 3){
y = 10
} else {
y = 0
}
# IF & ELSe#
x = runif(1, min = -5, max = 5)
if (x > 3){
y = 10
} else {
y = 0
}
# IF & ELSe#
x = runif(1, min = -5, max = 5)
if (x > 3){
y = 10
} else {
y = 0
}
# IF & ELSe#
x = runif(1, min = -5, max = 5)
# IF & ELSe#
x = runif(1, min = -5, max = 5)
# IF & ELSe#
x = runif(1, min = -5, max = 5)
if (x > 3){
y = 10
} else {
y = 0
}
# IF & ELSe#
x = runif(1, min = 0, max = 6)
if (x > 3){
y = 10
} else {
y = 0
}
# IF & ELSe#
x = runif(1, min = 0, max = 6)
# IF & ELSe#
x = runif(1, min = 0, max = 6)
if (x > 3){
y = 10
} else {
y = 0
}
y = if(x>3){
10
}else{
0
}
x = runif(1, min = 0, max = 6)
# Diferent ways
y = if(x>3){
10
}else{
0
}
for(i in 1:10){
print(i)
}
x = c("a", "b", "c", "d")
for(i in 1:4){
print(x[i])
}
for (i in seq_along(x)) {
pint(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x){
print(letter)
}
for(i in 1:4) print(x[i])
x = matrix(1:6, nrow = 2, ncol = 3)
x = matrix(1:6, 2, 3)
x = matrix(1:6, 2, 3)
for (i in seq_len(nrow(x))){
for(j in seq_len(ncol(x))){
print(x[i,j])
}
}
count = 0
while (count < 10) {
print(count)
count =+ 1
}
while (count < 10) {
print(count)
count = count + 1
}
count ==+ 1
count =+ 1
while (count < 10) {
print(count)
count =+ 1
}
z = 5
while(z >= 3 && z <= 10){
print(z)
coin = rbinom(1,1, 0.5)
if (coin == 1){
z = z + 1
} else {
z = z -1
}
}
x = 1
tol = 1e-8
x = 1
tol = 1e-8
repeat{
x1 = computeEstimate()
if(abs(x1 - x0) < tol){
break
}else {
x0 <- x1
}
}
??computeEstimate
compute.es
compute.es()
??compute.es
install.packages("compute.es")
library("compute.es")
# REPEAT, NEXT, BREAKE #
# repeat initiates an infinite loop. these are not commonly used in stats
library("compute.es")
x1 =  computeEsimate()
x = 1
tol = 1e-8
repeat{
x1 = runif(1, min = 0, max = 6)
if(abs(x1 - x0) < tol){
break
}else {
x0 <- x1
}
}
# REPEAT, NEXT, BREAKE #
# repeat initiates an infinite loop. these are not commonly used in stats
x0 = 1
tol = 1e-8
repeat{
x1 = runif(1, min = 0, max = 6)
if(abs(x1 - x0) < tol){
break
}else {
x0 <- x1
}
}
x0 = 1
tol = 2
repeat{
x1 = runif(1, min = 0, max = 6)
if(abs(x1 - x0) < tol){
break
}else {
x0 <- x1
}
}
for(i in 1:100){
if(i <= 20) {
#Skip the firts 20 interations
next
}
print(i)
}
add2(3,5)
add2 = function(x, y) {
x + y
}
add(2,3)
add2(2,3)
above10 <- function(x, y){
use = x > y
x[use]
above10 <- function(x, y){
use = x > y
x[use]
}
above <- function(x, n){
use = x > n
x[use]
}
x = 1:20
abive(x, 3)
above(x, 3)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] = mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, na.exclude = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] = mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, na.exclude = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] = mean(y[, i], na.rm = TRUE)
}
means
}
columnmean(airquality)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z= 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
str(lm)
# str(lm)
x = rnor(100, 2, 4)
str(x)
# str(lm)
x = rnor(100, 2, 4)
str(x)
# str(lm)
x = rnom(100, 2, 4)
# str(lm)
x = rnorm(100, 2, 4)
str(x)
f = gl(40, 10)
str(f)
library("datasets")
head(airquality)
str(airquality)
s = split(airquality, airquality$Month)
str(s)
x rnorm(10)
x = rnorm(10)
x = rnorm(10, 20, 2)
summary(x)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
rnorm(5)
rpois(10, 1)
rpois(10, 2)
rpois(10, 20)
y = 0.5 + 2 * x + e
y = 0.5 + 2 * x + e
x = rnorm(100)
# Generate a linear model
set.seed(20)
x = rnorm(100)
e = rnorm(100, 0, 2)
y = 0.5 + 2 * x + e
plot(x, y)
summary(x, y)
x = rbimom(100, 1, 0.5)
e = rnorm(100, 0, 2)
y = 0.5 + 2 * x + e
summary(x, y)
plot(x, y)
x = rbimom(100, 1, 0.5)
x = rbinom(100, 1, 0.5)
e = rnorm(100, 0, 2)
y = 0.5 + 2 * x + e
summary(x, y)
plot(x, y)
set.seed(1)
log.mu = 0.5 + 0.3 * x
y = rpois(100, exp(log.mu))
summary(y)
plogis(x,y)
plot(x,y)
summary(y)
y = rpois(100, exp(log.mu))
summary(y)
plot(x,y)
x = rnorm(100)
log.mu = 0.5 + 0.3 * x
y = rpois(100, exp(log.mu))
summary(y)
plot(x,y)
# sampling #
set.seed(1)
sample(1:10, 4)
sample(letters, 5)
sample(1:10)
sample(1:10, replace = T) # Sample with replacement
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plo(x,y)
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
Rprof(
fit <- lm(y ~ x1 + x2)
)
Rprof(
fit <- lm(y ~ x + f)
)
Rprof(
fit <- lm(y ~ x + e)
)
number_rewards_1 = integer(10)
setwd("E:/Archivos/Proyectos personales/Curso IA R - Udemy/IA_dovo_r/6 _Reinforcement Learning/Thompson Sampling")
dataset = read.csv("Ads_CTR_Optimisation.csv")
N = 10000
d = 10
number_rewards_1 = integer(d)
number_rewards_0 = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_random = 0
ad = 0
for (i in 1:d) {
random_betha = rbeta(n = 1,
shape1 = number_rewards_1[i] + 1,
shape2 = number_rewards_0[i] + 1)
if(random_betha > max_random){
max_random = random_betha
ad = i
}
}
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
if (reward == 1){
number_rewards_1[ad] = number_rewards_1[ad] + 1
}else{
number_rewards_0[ad] = number_rewards_0[ad] + 1
total_reward = total_reward + reward
}
total_reward = total_reward + reward
}
# Data vis hist
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
