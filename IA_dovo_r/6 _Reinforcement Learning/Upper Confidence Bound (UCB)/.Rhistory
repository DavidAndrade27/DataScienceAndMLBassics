}
}
for(i in 1:100){
if(i <= 20) {
#Skip the firts 20 interations
next
}
print(i)
}
add2(3,5)
add2 = function(x, y) {
x + y
}
add(2,3)
add2(2,3)
above10 <- function(x, y){
use = x > y
x[use]
above10 <- function(x, y){
use = x > y
x[use]
}
above <- function(x, n){
use = x > n
x[use]
}
x = 1:20
abive(x, 3)
above(x, 3)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] = mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, na.exclude = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] = mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, na.exclude = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i] = mean(y[, i], na.rm = TRUE)
}
means
}
columnmean(airquality)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z= 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
dataset = read.csv("")
dataset = read.csv("")
setwd("E:/Archivos/Proyectos personales/Curso IA R - Udemy/IA_dovo_r/6 _Reinforcement Learning/Upper Confidence Bound (UCB)")
dataset = read.csv("Ads_CTR_Optimisation.csv")
dataset = read.csv("Ads_CTR_Optimisation.csv")
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N){
ad = sample(1:10, 1)
ad_select = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
# Vis Hist
hist(total_reward,
col = green,
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
# Vis Hist
hist(total_reward,
col = green,
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
# Vis Hist
hist(total_reward,
col = green,
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
# Vis Hist
hist(total_reward,
col = blue,
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
# Vis Hist
hist(total_reward,
col = "blue",
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N){
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
# Vis Hist
hist(total_reward,
col = "blue",
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = dataset[n, ad]
total_reward = total_reward + reward
}
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
# Vis Hist
hist(ads_selected,
col = "blue",
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
# Vis Hist
hist(ad_selected,
col = "blue",
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
# Vis Hist
hist(ads_selected,
col = "blue",
main = "Hist of ads selected",
xlab = "Ads",
ylab = "Freq of each ad was showed")
if(upper_bound > max_upper_bound)
dataset = read.csv("Ads_CTR_Optimisation.csv")
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = aappend(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
# Data vis hist
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
ads_selected
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
# Implementar UCB
d = 10
N = 10000
number_of_selections = integer(d)
sums_of_rewards = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for(i in 1:d){
if(number_of_selections[i]>0){
average_reward = sums_of_rewards[i] / number_of_selections[i]
delta_i = sqrt(3/2*log(n)/number_of_selections[i])
upper_bound = average_reward + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_of_selections[ad] = number_of_selections[ad] + 1
reward = dataset[n, ad]
sums_of_rewards[ad] = sums_of_rewards[ad] + reward
total_reward = total_reward + reward
}
dataset = read.csv("Ads_CTR_Optimisation.csv")
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(N)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
N = 10000
d = 10
number_selections = integer(d)
sums_rewards = integer(d)
ads_selected = integer(0)
total_reward = 0
for(n in 1:N){
max_upper_bound = 0
ad = 0
for (i in 1:d) {
if(number_selections[i] > 0){
mean_rewards = sums_rewards[i] / number_selections[i]
delta_i = sqrt(3/2 * log(n) / number_selections[i])
upper_bound = mean_rewards + delta_i
}else{
upper_bound = 1e400
}
if(upper_bound > max_upper_bound){
max_upper_bound = upper_bound
ad = i
}
}
ads_selected = append(ads_selected, ad)
number_selections[ad] = number_selections[ad] + 1
reward = dataset[n, ad]
sums_rewards[ad] = sums_rewards[ad] + reward
total_reward = total_reward + reward
}
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
